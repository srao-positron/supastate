"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.displayFlags = displayFlags;
const chalk = require("chalk");
function formatTable(headers, rows) {
    const columnWidths = [
        Math.max(headers[0].length, ...rows.map(row => row[0].length)),
        Math.max(headers[1].length, ...rows.map(row => row[1].length)),
        Math.max(headers[2].length, ...rows.map(row => row[2].length)),
    ];
    const createSeparator = () => {
        return '+' + columnWidths.map(width => '-'.repeat(width + 2)).join('+') + '+';
    };
    const formatRow = (values) => {
        return '|' + values.map((value, i) => ` ${value.padEnd(columnWidths[i])} `).join('|') + '|';
    };
    const separator = createSeparator();
    let table = separator + '\n';
    table += formatRow(headers) + '\n';
    table += separator + '\n';
    rows.forEach(row => {
        table += formatRow(row) + '\n';
    });
    table += separator;
    return table;
}
async function displayFlags(flagsData, ioHelper) {
    const headers = ['Feature Flag Name', 'Recommended Value', 'User Value'];
    const rows = [];
    flagsData.forEach((flag, index) => {
        if (index === 0 || flagsData[index].module !== flagsData[index - 1].module) {
            rows.push([chalk.bold(`Module: ${flag.module}`), '', '']);
        }
        rows.push([
            flag.name,
            String(flag.recommendedValue),
            flag.userValue === undefined ? '<unset>' : String(flag.userValue),
        ]);
    });
    const formattedTable = formatTable(headers, rows);
    await ioHelper.defaults.info(formattedTable);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxhZ3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJmbGFncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQWdDQSxvQ0FvQkM7QUFuREQsK0JBQStCO0FBRy9CLFNBQVMsV0FBVyxDQUFDLE9BQWlCLEVBQUUsSUFBZ0I7SUFDdEQsTUFBTSxZQUFZLEdBQUc7UUFDbkIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5RCxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzlELElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDL0QsQ0FBQztJQUVGLE1BQU0sZUFBZSxHQUFHLEdBQUcsRUFBRTtRQUMzQixPQUFPLEdBQUcsR0FBRyxZQUFZLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO0lBQ2hGLENBQUMsQ0FBQztJQUVGLE1BQU0sU0FBUyxHQUFHLENBQUMsTUFBZ0IsRUFBRSxFQUFFO1FBQ3JDLE9BQU8sR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7SUFDOUYsQ0FBQyxDQUFDO0lBRUYsTUFBTSxTQUFTLEdBQUcsZUFBZSxFQUFFLENBQUM7SUFDcEMsSUFBSSxLQUFLLEdBQUcsU0FBUyxHQUFHLElBQUksQ0FBQztJQUM3QixLQUFLLElBQUksU0FBUyxDQUFDLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQztJQUNuQyxLQUFLLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQztJQUUxQixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ2pCLEtBQUssSUFBSSxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDO0lBQ2pDLENBQUMsQ0FBQyxDQUFDO0lBRUgsS0FBSyxJQUFJLFNBQVMsQ0FBQztJQUNuQixPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFFTSxLQUFLLFVBQVUsWUFBWSxDQUFDLFNBQXdCLEVBQUUsUUFBa0I7SUFDN0UsTUFBTSxPQUFPLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxtQkFBbUIsRUFBRSxZQUFZLENBQUMsQ0FBQztJQUV6RSxNQUFNLElBQUksR0FBZSxFQUFFLENBQUM7SUFFNUIsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRTtRQUNoQyxJQUFJLEtBQUssS0FBSyxDQUFDLElBQUksU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sS0FBSyxTQUFTLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQzNFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDNUQsQ0FBQztRQUVELElBQUksQ0FBQyxJQUFJLENBQUM7WUFDUixJQUFJLENBQUMsSUFBSTtZQUNULE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7WUFDN0IsSUFBSSxDQUFDLFNBQVMsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7U0FDbEUsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLGNBQWMsR0FBRyxXQUFXLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBRWxELE1BQU0sUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDL0MsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgRmVhdHVyZUZsYWcgfSBmcm9tICdAYXdzLWNkay90b29sa2l0LWxpYic7XG5pbXBvcnQgKiBhcyBjaGFsayBmcm9tICdjaGFsayc7XG5pbXBvcnQgdHlwZSB7IElvSGVscGVyIH0gZnJvbSAnLi4vYXBpLXByaXZhdGUnO1xuXG5mdW5jdGlvbiBmb3JtYXRUYWJsZShoZWFkZXJzOiBzdHJpbmdbXSwgcm93czogc3RyaW5nW11bXSk6IHN0cmluZyB7XG4gIGNvbnN0IGNvbHVtbldpZHRocyA9IFtcbiAgICBNYXRoLm1heChoZWFkZXJzWzBdLmxlbmd0aCwgLi4ucm93cy5tYXAocm93ID0+IHJvd1swXS5sZW5ndGgpKSxcbiAgICBNYXRoLm1heChoZWFkZXJzWzFdLmxlbmd0aCwgLi4ucm93cy5tYXAocm93ID0+IHJvd1sxXS5sZW5ndGgpKSxcbiAgICBNYXRoLm1heChoZWFkZXJzWzJdLmxlbmd0aCwgLi4ucm93cy5tYXAocm93ID0+IHJvd1syXS5sZW5ndGgpKSxcbiAgXTtcblxuICBjb25zdCBjcmVhdGVTZXBhcmF0b3IgPSAoKSA9PiB7XG4gICAgcmV0dXJuICcrJyArIGNvbHVtbldpZHRocy5tYXAod2lkdGggPT4gJy0nLnJlcGVhdCh3aWR0aCArIDIpKS5qb2luKCcrJykgKyAnKyc7XG4gIH07XG5cbiAgY29uc3QgZm9ybWF0Um93ID0gKHZhbHVlczogc3RyaW5nW10pID0+IHtcbiAgICByZXR1cm4gJ3wnICsgdmFsdWVzLm1hcCgodmFsdWUsIGkpID0+IGAgJHt2YWx1ZS5wYWRFbmQoY29sdW1uV2lkdGhzW2ldKX0gYCkuam9pbignfCcpICsgJ3wnO1xuICB9O1xuXG4gIGNvbnN0IHNlcGFyYXRvciA9IGNyZWF0ZVNlcGFyYXRvcigpO1xuICBsZXQgdGFibGUgPSBzZXBhcmF0b3IgKyAnXFxuJztcbiAgdGFibGUgKz0gZm9ybWF0Um93KGhlYWRlcnMpICsgJ1xcbic7XG4gIHRhYmxlICs9IHNlcGFyYXRvciArICdcXG4nO1xuXG4gIHJvd3MuZm9yRWFjaChyb3cgPT4ge1xuICAgIHRhYmxlICs9IGZvcm1hdFJvdyhyb3cpICsgJ1xcbic7XG4gIH0pO1xuXG4gIHRhYmxlICs9IHNlcGFyYXRvcjtcbiAgcmV0dXJuIHRhYmxlO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGlzcGxheUZsYWdzKGZsYWdzRGF0YTogRmVhdHVyZUZsYWdbXSwgaW9IZWxwZXI6IElvSGVscGVyKTogUHJvbWlzZTx2b2lkPiB7XG4gIGNvbnN0IGhlYWRlcnMgPSBbJ0ZlYXR1cmUgRmxhZyBOYW1lJywgJ1JlY29tbWVuZGVkIFZhbHVlJywgJ1VzZXIgVmFsdWUnXTtcblxuICBjb25zdCByb3dzOiBzdHJpbmdbXVtdID0gW107XG5cbiAgZmxhZ3NEYXRhLmZvckVhY2goKGZsYWcsIGluZGV4KSA9PiB7XG4gICAgaWYgKGluZGV4ID09PSAwIHx8IGZsYWdzRGF0YVtpbmRleF0ubW9kdWxlICE9PSBmbGFnc0RhdGFbaW5kZXggLSAxXS5tb2R1bGUpIHtcbiAgICAgIHJvd3MucHVzaChbY2hhbGsuYm9sZChgTW9kdWxlOiAke2ZsYWcubW9kdWxlfWApLCAnJywgJyddKTtcbiAgICB9XG5cbiAgICByb3dzLnB1c2goW1xuICAgICAgZmxhZy5uYW1lLFxuICAgICAgU3RyaW5nKGZsYWcucmVjb21tZW5kZWRWYWx1ZSksXG4gICAgICBmbGFnLnVzZXJWYWx1ZSA9PT0gdW5kZWZpbmVkID8gJzx1bnNldD4nIDogU3RyaW5nKGZsYWcudXNlclZhbHVlKSxcbiAgICBdKTtcbiAgfSk7XG5cbiAgY29uc3QgZm9ybWF0dGVkVGFibGUgPSBmb3JtYXRUYWJsZShoZWFkZXJzLCByb3dzKTtcblxuICBhd2FpdCBpb0hlbHBlci5kZWZhdWx0cy5pbmZvKGZvcm1hdHRlZFRhYmxlKTtcbn1cbiJdfQ==