import { config } from 'dotenv'
import { createClient } from '@supabase/supabase-js'

// Load environment variables
config({ path: '.env.local' })

async function debugSubstackPostEntity() {
  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.SUPABASE_SERVICE_ROLE_KEY!
  )

  console.log('=== DEBUGGING SUBSTACK_POST.md ENTITY ===\n')

  // Find the SUBSTACK_POST.md entity in Supabase
  const { data: substackEntity, error } = await supabase
    .from('code_entities')
    .select('*')
    .eq('file_path', 'SUBSTACK_POST.md')
    .eq('project_name', 'camille')
    .single()

  if (error) {
    console.error('Error finding SUBSTACK_POST.md:', error)
    return
  }

  if (substackEntity) {
    console.log('Found SUBSTACK_POST.md in Supabase:')
    console.log('ID:', substackEntity.id)
    console.log('Created:', substackEntity.created_at)
    console.log('Updated:', substackEntity.updated_at)
    console.log('Language:', substackEntity.language)
    console.log('Type:', substackEntity.entity_type)
    
    // This ID should be bfd50221-e05d-4a0c-bb80-f0ea35e7e11a
    // But Neo4j has c58846a3-da47-42e1-a206-cd2a9cdd5b44
    
    console.log('\n⚠️  CRITICAL FINDING:')
    console.log('Supabase ID:', substackEntity.id)
    console.log('Neo4j ID: c58846a3-da47-42e1-a206-cd2a9cdd5b44')
    console.log('These IDs are DIFFERENT!')
    
    // Let's check when this was ingested
    const { data: queueLogs } = await supabase
      .from('pattern_processor_logs')
      .select('*')
      .eq('details->>code_entity_id', substackEntity.id)
      .order('created_at', { ascending: true })
      .limit(5)
      
    if (queueLogs && queueLogs.length > 0) {
      console.log('\n=== INGESTION LOGS FOR THIS ENTITY ===')
      queueLogs.forEach(log => {
        console.log(`${log.created_at}: ${log.message}`)
        if (log.details) {
          console.log('  Details:', JSON.stringify(log.details, null, 2))
        }
      })
    }
    
    // Check if the Neo4j ID appears anywhere
    console.log('\n=== SEARCHING FOR NEO4J ID SOURCE ===')
    console.log('The ID c58846a3-da47-42e1-a206-cd2a9cdd5b44 must be generated somewhere.')
    console.log('Possible sources:')
    console.log('1. A hardcoded value in the code (unlikely)')
    console.log('2. Generated when entity.id is null/undefined')
    console.log('3. A default value in Neo4j')
    console.log('4. Generated by crypto.randomUUID() somewhere')
    
    // Theory: All entities are being merged because they're all getting the same ID
    console.log('\n=== MERGE BEHAVIOR THEORY ===')
    console.log('If entity.id is undefined for all entities, Neo4j might:')
    console.log('1. Generate the same ID for all MERGE operations')
    console.log('2. Use a default ID')
    console.log('3. Merge all entities into the first one created')
  }
}

debugSubstackPostEntity().catch(console.error)